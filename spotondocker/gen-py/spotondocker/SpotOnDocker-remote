#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from spotondocker import SpotOnDocker
from spotondocker.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void Ping()')
    print('  string MpClass(string formula)')
    print('  bool Contains(string formula1, string formula2)')
    print('  bool IsEquivalent(string formula1, string formula2)')
    print('  string RndLTL(i32 numAP, i32 rndSeed)')
    print('   GetAP(string formula)')
    print('  string ToLatexString(string formula)')
    print('  TGraph Translate(string formula)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = SpotOnDocker.Client(protocol)
transport.open()

if cmd == 'Ping':
    if len(args) != 0:
        print('Ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.Ping())

elif cmd == 'MpClass':
    if len(args) != 1:
        print('MpClass requires 1 args')
        sys.exit(1)
    pp.pprint(client.MpClass(args[0],))

elif cmd == 'Contains':
    if len(args) != 2:
        print('Contains requires 2 args')
        sys.exit(1)
    pp.pprint(client.Contains(args[0], args[1],))

elif cmd == 'IsEquivalent':
    if len(args) != 2:
        print('IsEquivalent requires 2 args')
        sys.exit(1)
    pp.pprint(client.IsEquivalent(args[0], args[1],))

elif cmd == 'RndLTL':
    if len(args) != 2:
        print('RndLTL requires 2 args')
        sys.exit(1)
    pp.pprint(client.RndLTL(eval(args[0]), eval(args[1]),))

elif cmd == 'GetAP':
    if len(args) != 1:
        print('GetAP requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetAP(args[0],))

elif cmd == 'ToLatexString':
    if len(args) != 1:
        print('ToLatexString requires 1 args')
        sys.exit(1)
    pp.pprint(client.ToLatexString(args[0],))

elif cmd == 'Translate':
    if len(args) != 1:
        print('Translate requires 1 args')
        sys.exit(1)
    pp.pprint(client.Translate(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
